apiVersion: gi.ds.isc.ibm.com/v1
kind: GuardiumInsights
metadata:
  #name: This must be 10 or less characters
  name: {{ gi_namespace }}
spec:
{% if gi_ssh_host != '0.0.0.0' or gi_ssh_port|int != 0 %}
  ibm-insights-sequencer:
{% endif %}
{% if gi_ssh_host != '0.0.0.0' %}
    GUARDIUM_AGENT_SCP_TARGET_HOST: {{ gi_ssh_host }}
{% endif %}
{% if gi_ssh_port|int != 0 %}
    GUARDIUM_AGENT_SCP_TARGET_PORT: {{ gi_ssh_port }}
{% endif %}
  version: {{ gi_version }}
{% if stap_supp == 'Y' and gi_version_index|int < 3 %}
  connections:
    insightsEnv:
      FEATURE_STAP_STREAMING: "true"
{% endif %}
  license:
    accept: true
    licenseType: "{{ gi_license }}"
  guardiumInsightsGlobal:
{% if storage_type == 'P' %}
    deploySettings:
      ensureDb2InstallPlacement: true
{% endif %}
    dev: "false"
    licenseAccept: true
    # Guardium Insights template size can be defined as below using the size parameter
    size: {{ gi_deployment_size }}
    #image:
      #insightsPullSecret needs to be set to the following developer/QA workflow
      #insightsPullSecret: ibm-artifactory-key
      #repository needs to be set to the following developer/QA workflow
      #repository: sec-guardium-next-gen-docker-local.artifactory.swg-devops.com
    insights:
      ingress:
        #hostName: Change this, ex: staging.apps.gi-devops-ocp46-41.cp.fyre.ibm.com
        hostName: insights.apps.{{ domain }}
        #domainName:  Change this
        domainName: apps.{{ domain }}
      ics:
        namespace: ibm-common-services
        registry: common-service
    #storageClassName: Change this to a ReadWriteMany StorageClass!!!
    storageClassName: "{{ storage_class_rw_many }}"
  dependency-kafka:
    kafka:
      storage:
        class: "{{ storage_class_rw_one }}"
{% if gi_kafka_size|int != 0 %}
        size: {{ gi_kafka_size }}Gi
{% endif %}
    zookeeper:
      storage:
        class: "{{ storage_class_rw_one }}"
{% if gi_zookeeper_size|int != 0 %}
        size: {{ gi_zookeeper_size }}Gi
{% endif %}
  dependency-redis:
    size: 3
    persistence:
      storageClass: "{{ storage_class_rw_one }}"
  dependency-mongodb:
    storage:
    - metadata:
        name: data-volume
      spec:
        accessModes:
        - ReadWriteOnce
{% if gi_mongo_size|int != 0 %}
        resources:
          requests:
            storage: {{ gi_mongo_size }}Gi
{% endif %}
        storageClassName: "{{ storage_class_rw_one }}"
    - metadata:
        name: logs-volume
      spec:
        accessModes:
        - ReadWriteMany
{% if gi_mongo_meta_size|int != 0 %}
        resources:
          requests:
            storage: {{ gi_mongo_meta_size }}Gi
{% endif %}
        storageClassName: "{{ storage_class_rw_many }}"
  dependency-db2:
    db2:
      instance:
        registry:
          DB2_4K_DEVICE_SUPPORT: "ON"
      size: "{{ db2_nodes_array|length }}"
      #resources:
        #cpu: "6"
        #memory: "48Gi"
      #limits:
        #cpu: "6"
        #memory: "48Gi"
      dbSettings:
{% if db2_enc %}
        encrypt: "YES"
{% else %}
        encrypt: "NO"
{% endif %}
      storage:
{% if gi_logs_size|int != 0 %}
      - name: activelogs
        spec:
          accessModes:
          - ReadWriteOnce
          storageClassName: "{{ db2_class_block }}"
          resources:
            requests:
              storage: "{{ gi_logs_size }}Gi"
{% endif %}
      - name: meta
        spec:
          accessModes:
          - ReadWriteMany
{% if gi_meta_size|int != 0 %}
          resources:
            requests:
              storage: {{ gi_meta_size }}Gi
{% endif %}
          storageClassName: "{{ db2_class_fs }}"
        type: create
      - name: data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: "{{ gi_ds_size }}Gi"
          storageClassName: "{{ db2_class_block }}"
        type: template
    mln:
      distribution: 0:0
      total: "{{ db2_nodes_array|length }}"
  mini-snif:
    persistentVolumesClaims:
      mini-snif-shared:
        storageClassName: "{{ storage_class_rw_many }}"
  universal-connector-manager:
    persistentVolumesClaims:
      universal-connector-manager-shared:
        storageClassName: "{{ storage_class_rw_many }}"
  settings-datasources:
    persistentVolumesClaims:
      settings-datasources:
        storageClassName: "{{ storage_class_rw_many }}"
  ticketing:
    persistentVolumesClaims:
      ticketing-keystore:
        storageClassName: "{{ storage_class_rw_many }}"
