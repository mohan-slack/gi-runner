- hosts: bastion
  vars:
    install_ldap: "{{ lookup('env','GI_INSTALL_LDAP') }}"
    install_ics: "{{ lookup('env','GI_ICS') }}"
    install_cp4s: "{{ lookup('env','GI_CP4S') }}"
    install_gi: "{{ lookup('env','GI_INSTALL_GI') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"
    bas_ip: "{{ lookup('env','GI_BASTION_IP') }}"

  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_INSTALL_LDAP", value: "{{ install_ldap }}" }
      - { name: "GI_ICS", value: "{{ install_ics }}" }
      - { name: "GI_CP4S", value: "{{ install_cp4s }}" }
      - { name: "GI_INSTALL_GI", value: "{{ install_gi }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }
      - { name: "GI_BASTION_IP", value: "{{ bas_ip }}" }

  - debug:
      msg: "Your installation does not contain LDAP deployment"
    when: install_ldap == 'N'

  - meta: end_play
    when: install_ldap == 'N'

  - name: Set LDAP installation variables from env
    set_fact:
      ldap_domain: "{{ lookup('env','GI_LDAP_DOMAIN') }}"
      ldap_password: "{{ lookup('env','GI_LDAP_USERS_PWD') }}"
      ldap_users: "{{ lookup('env','GI_LDAP_USERS').split(',') }}"
      ldap_users_raw: "{{ lookup('env','GI_LDAP_USERS') }}"
      ldap_depl_type: "{{ lookup('env','GI_LDAP_DEPLOYMENT') }}"
    when: install_ldap == 'Y'

  - name: Check LDAP variables
    fail: msg="Variable {{ item.name }} is not set"
    loop:
      - { name: "GI_LDAP_DOMAIN", value: "{{ ldap_domain }}" }
      - { name: "GI_LDAP_USERS_PWD", value: "{{ ldap_password }}" }
      - { name: "GI_LDAP_USERS", value: "{{ ldap_users }}" }
      - { name: "GI_LDAP_DEPLOYMENT", value: "{{ ldap_depl_type }}" }
    when: install_ldap == 'Y' and item.value == ""

  - name: Set ICS installation variables from env
    set_fact:
      ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
    when: install_ics == 'Y'

  - name: Check ICS variables
    fail: msg="Variable {{ item.name }} is not set"
    loop:
      - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
    when: install_ics == 'Y' and item.value == ""

  - name: Encode Base64 ldap admin password
    shell:
      cmd: "echo -n {{ ldap_password }} | base64"
    register: ldap_password_base64
    when: install_ics == 'Y'

  - name: Login to ICS
    shell:
      cmd: "cloudctl login -a https://cp-console.apps.{{ domain }} --skip-ssl-validation -u admin -p '{{ ics_admin_password }}' -n ibm-common-services"
    when: install_ics == 'Y'

  - name: Get openldap route name
    shell:
      cmd: "oc get routes -n openldap -o json|jq .items[0].spec.host|tr -d '\"'"
    register: openldap_route
    when: ldap_depl_type == "C"

  - name: Set LDAP URL for container
    set_fact:
      ldap_url: "{{ openldap_route.stdout }}:1389"
    when: ldap_depl_type == "C"

  - name: Set LDAP URL for standalone
    set_fact:
      ldap_url: "{{ bas_ip }}:389"
    when: ldap_depl_type == "S"

  - name: Extract ICS Access Token
    shell:
      cmd: "cloudctl tokens|grep Access|awk -F ':' '{ print $2 }'|awk -F ' ' '{ print $2}'"
    register: access_token
    when: install_ics == 'Y'

  - name: Delete OpenLDAP from ICS configuration
    uri:
      url: 'https://cp-console.apps.{{ domain }}/idmgmt/identity/api/v1/directory/ldap/offboardDirectory'
      method: POST
      headers:
        Authorization: 'bearer {{ access_token.stdout }}'
        Content-Type: 'application/json'
      validate_certs: no
      use_proxy: no
    environment:
      no_proxy: cp-console.apps.{{ domain }}
    when: install_ics == 'Y' or install_cp4s == 'Y'
    ignore_errors: true

  - name: Restore HA Proxy config for OCP
    shell:
      cmd: cat /etc/haproxy/haproxy.cfg.main > /etc/haproxy/haproxy.cfg
    when: ldap_depl_type == "C"

  - name: Restore HA Proxy config for GI
    shell:
      cmd: cat /etc/haproxy/haproxy.cfg.ssh >> /etc/haproxy/haproxy.cfg  
    when: install_gi == 'Y' and ldap_depl_type == "C"

  - name: Restart HA Proxy
    service:
      name: haproxy
      state: restarted
    when: ldap_depl_type == "C"

  - name: Stop LDAP server
    service:
      name: slapd
      state: stopped
      enabled: no
    when: ldap_depl_type == "S"

  - name: Cleanup openldap configuration
    shell:
      cmd: "{{ item }}"
    with_items:
      - "rm -rf /etc/openldap/*"
      - "tar xvf ../ldap/openldap_fresh.tar -C /etc/openldap"
      - "rm -rf /var/lib/ldap/*"
    when: ldap_depl_type == "S"
    args:
      warn: no

  - name: Remove containerized openldap instance
    shell:
      cmd: oc delete namespace openldap
    when: ldap_depl_type == "C"

  - debug:
        msg:
          - "OpenLDAP instance uninstalled with success."
