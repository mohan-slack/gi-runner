- name: Install python3-ldap
  dnf:
    name:
      - "python3-ldap"
    state: latest
  when: internet_type != 'A' and ldap_depl_type == "S"

- name: Archive clean openldap configuration
  shell:
    cmd: "tar cvf openldap_fresh.tar *"
    chdir: /etc/openldap
  when: ldap_depl_type == "S"
  args:
    warn: no

- name: Move archive to ldap directory
  shell:
    cmd: "mv /etc/openldap/openldap_fresh.tar ../ldap"
  when: ldap_depl_type == "S"
  args:
    warn: no

- name: Create LDAP directory
  file:
    path: ../ldap
    state: directory
  when: ldap_depl_type == "S"

- name: Set SELINUX for OpenLDAP
  shell:
    cmd: "semanage permissive -a slapd_t"
  when: ldap_depl_type == "S"

- name: Open ports for OpenLDAP
  firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "389", type: "tcp" }
    - { port: "636", type: "tcp" }
  when: ldap_depl_type == "S"

- name: Start LDAP server
  service:
    name: slapd
    state: started
    enabled: yes
  when: ldap_depl_type == "S"

- name: Encrypt admin password
  shell:
    cmd: slappasswd -s {{ ldap_password }}
  register: ssha_admin_password
  when: ldap_depl_type == "S"

- name: Extract first LDAP domain component
  shell:
    cmd: "echo {{ ldap_domain }}|awk -F ',' '{ print $1}'|awk -F '=' '{ print $2 }'"
  register: ldap_organization

- name: "Prepare ldif's"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "ldap/config.j2", dest: "{{ temp_dir }}/adds/config.ldif" }
    - { src: "ldap/admin_passwd.j2", dest: "{{ temp_dir }}/adds/admin_passwd.ldif" }
    - { src: "ldap/monitor.j2", dest: "{{ temp_dir }}/adds/monitor.ldif" }
    - { src: "ldap/root_dn.j2", dest: "{{ temp_dir }}/adds/root_dn.ldif" }
  when: ldap_depl_type == "S"

- name: Modify LDAP domain
  shell:
    cmd: "{{ item }}"
  loop:
    - "ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ temp_dir }}/adds/config.ldif"
    - "ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ temp_dir }}/adds/admin_passwd.ldif"
    - "ldapmodify -Y EXTERNAL -H ldapi:/// -f {{ temp_dir }}/adds/monitor.ldif"
  ignore_errors: no
  when: ldap_depl_type == "S"

- name: Add Root DN
  shell:
    cmd: "ldapadd -f {{ temp_dir }}/adds/root_dn.ldif -D cn=admin,{{ ldap_domain }} -w {{ ldap_password }}"
  when: ldap_depl_type == "S"

- name: Add InetOrgPerson schema
  shell:
    cmd: "{{ item }}"
  loop:
    - "ldapadd -Y EXTERNAL -H ldapi:// -f /etc/openldap/schema/cosine.ldif"
    - "ldapadd -Y EXTERNAL -H ldapi:// -f /etc/openldap/schema/inetorgperson.ldif"
  when: ldap_depl_type == "S"

- name: Add User OU
  community.general.ldap_entry:
    dn: "ou=users,{{ ldap_domain }}"
    objectClass: organizationalUnit
    bind_dn: "cn=admin,{{ ldap_domain }}"
    bind_pw: "{{ ldap_password }}"
    server_uri: ldap://{{ bas_ip }}/
  when: ldap_depl_type == "S"

- name: Add Users
  community.general.ldap_entry:
    dn: "cn={{ item }},ou=users,{{ ldap_domain }}"
    objectClass: inetOrgPerson
    attributes:
      cn: "{{ item }}"
      sn: "{{ item }}"
      uid: "{{ item }}"
      userPassword: "{{ ldap_password }}"
      mail: "{{ item }}@{{ domain }}"
    bind_dn: "cn=admin,{{ ldap_domain }}"
    bind_pw: "{{ ldap_password }}"
    server_uri: "ldap://{{ bas_ip }}/"
  with_items:
    - "{{ ldap_users | list }}"
  when: ldap_depl_type == "S"

- name: Check openldap namespace existence
  shell:
    cmd: oc get namespace|grep openldap|wc -l
  register: is_namespace_openldap
  when: ldap_depl_type == "C"

- name: Add openldap namespace
  shell:
    cmd: oc create namespace openldap
  when: ldap_depl_type == "C" and is_namespace_openldap.stdout == "0"

- name: Create password list
  shell:
    cmd: "USER_PWD_LIST=\"\";IFS=',' read -r -a USER_ARR <<< {{ ldap_users_raw }};for user in ${USER_ARR[@]}; do USER_PWD_LIST+=\"{{ ldap_password }},\";done;echo $USER_PWD_LIST"
  register: ldap_user_pwds
  when: ldap_depl_type == "C"

- name: Add openldap secret
  shell:
    cmd: "oc create secret generic openldap --from-literal=adminpassword={{ ldap_password }} --from-literal=users={{ ldap_users_raw }} --from-literal=passwords={{ ldap_user_pwds.stdout }} -n openldap"
  register: result
  failed_when: result.rc != 0 and "already exists" not in result.stderr
  when: ldap_depl_type == "C"

- name: Get openldap digest
  shell:
    cmd: "cat {{ temp_dir}}/adds/digests.txt|grep openldap:latest|awk -F ',' '{print $2}'"
  register: ldap_digest
  when: ldap_depl_type == "C"

- name: Set correct tag or digest
  set_fact:
    ldap_version: "{{ ':latest' if internet_type != 'A' else '@'+ldap_digest.stdout }}"
  when: ldap_depl_type == "C"

- name: Configure openldap deployment plan
  template:
    src: "openldap_depl.j2"
    dest: "{{ temp_dir }}/adds/openldap_depl.yaml"
  when: ldap_depl_type == "C"

- name: Deploy bitnami.openldap
  shell:
    cmd: "oc create -f {{ item }} -n openldap"
  register: result
  with_items:
    - "{{ temp_dir }}/adds/openldap_depl.yaml"
    - ../scripts/openldap_svc.yaml
  failed_when: result.rc != 0 and "already exists" not in result.stderr and "already allocated" not in result.stderr
  when: ldap_depl_type == "C"

- name: Wait for openldap successful deployment
  shell:
    cmd: "oc get pods -n openldap|grep 1/1|wc -l"
  register: openldap_status
  until: "openldap_status.stdout == \"1\""
  retries: 20
  delay: 10
  when: ldap_depl_type == "C"

- name: Add route for openldap
  shell:
    cmd: "oc expose service/openldap -n openldap"
  register: result
  failed_when: result.rc != 0 and "already exists" not in result.stderr
  when: ldap_depl_type == "C"

- name: Get openldap route name
  shell:
    cmd: "oc get routes -n openldap -o json|jq .items[0].spec.host|tr -d '\"'"
  register: openldap_route
  when: ldap_depl_type == "C"

- name: Encode Base64 ldap admin password
  shell:
    cmd: "echo -n {{ ldap_password }} | base64"
  register: ldap_password_base64

- name: Login to ICS
  shell:
    cmd: "cloudctl login -a https://cp-console.apps.{{ domain }} --skip-ssl-validation -u admin -p '{{ ics_admin_password }}' -n ibm-common-services"
  when: install_ics == 'Y'

- name: Extract ICS Access Token
  shell:
    cmd: "cloudctl tokens|grep Access|awk -F ':' '{ print $2 }'|awk -F ' ' '{ print $2}'"
  register: access_token
  when: install_ics == 'Y' or install_cp4s == 'Y'

- name: Set LDAP URL for container
  set_fact:
    ldap_url: "{{ openldap_route.stdout }}:1389"
  when: ldap_depl_type == "C"

- name: Set LDAP URL for standalone
  set_fact:
    ldap_url: "{{ bas_ip }}:389"
  when: ldap_depl_type == "S"

- name: Check HA proxy with OpenLDAP
  shell:
    cmd: cat /etc/haproxy/haproxy.cfg|grep "frontend openldap"|wc -l
  register: is_openldap_in_haproxy

- name: Create HA Proxy config file with openldap
  template:
    src: haproxy_with_ldap.j2
    dest: /etc/haproxy/haproxy.cfg.ldap
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
    nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
    ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
    workers: "{{ nodes|zip(ips)|list }}"
  when: is_master_only == 'N' and ldap_depl_type == "C" and is_openldap_in_haproxy.stdout == "0"

- name: Create HA Proxy config file with ldap (no dedicated workers)
  template:
    src: haproxy_with_ldap_masters_only.j2
    dest: /etc/haproxy/haproxy.cfg.ldap
  vars:
    masters: "{{ master_name|zip(master_ip)|list }}"
  when: is_master_only == 'Y' and ldap_depl_type == "C" and is_openldap_in_haproxy.stdout == "0"

- name: Update HA proxy config
  shell:
    cmd: cat /etc/haproxy/haproxy.cfg.ldap >> /etc/haproxy/haproxy.cfg
  when: ldap_depl_type == "C" and is_openldap_in_haproxy.stdout == "0"

- name: Open openldap port on load balancer (bastion)
  firewalld:
    port: "1389/tcp"
    permanent: yes
    immediate: yes
    state: enabled
  when: ldap_depl_type == "C"

- name: Restart HA Proxy
  service:
    name: haproxy
    state: restarted
  when: ldap_depl_type == "C" and is_openldap_in_haproxy.stdout == "0"

- name: Add email address to users
  community.general.ldap_attrs:
    dn: "cn={{ item }},ou=users,{{ ldap_domain }}"
    attributes:
        mail: "{{ item }}@{{ domain }}"
        cn: "{{ item }}"
        sn: "{{ item }}"
    state: exact
    server_uri: "ldap://{{ ldap_url }}"
    bind_dn: "cn=admin,{{ ldap_domain }}"
    bind_pw: "{{ ldap_password }}"
  with_items:
    - "{{ ldap_users | list }}"
  when: ldap_depl_type == "C"

- name: Remove LDAP from ICS if exists
  uri:
    url: "https://cp-console.apps.{{ domain }}/idmgmt/identity/api/v1/directory/ldap/offboardDirectory"
    method: POST
    headers:
      Authorization: "Bearer {{ access_token.stdout }}"
    validate_certs: no
    use_proxy: no
  environment:
    no_proxy: cp-console.apps.{{ domain }}
  when: install_ics == 'Y' or install_cp4s == 'Y'
  ignore_errors: yes

- name: Add OpenLDAP to ICS configuration for standalone
  uri:
    url: 'https://cp-console.apps.{{ domain }}/idmgmt/identity/api/v1/directory/ldap/onboardDirectory'
    method: POST
    body: "{\"LDAP_ID\": \"local_ldap\", \"LDAP_URL\": \"ldap://{{ ldap_url }}\", \"LDAP_BASEDN\": \"{{ ldap_domain }}\", \"LDAP_BINDDN\": \"cn=admin,{{ ldap_domain }}\", \"LDAP_BINDPASSWORD\": \"{{ ldap_password_base64.stdout }}\", \"LDAP_TYPE\": \"Custom\", \"LDAP_USERFILTER\": \"(&(uid=%v)(objectclass=inetOrgPerson))\", \"LDAP_GROUPFILTER\": \"(&(cn=%v)(objectclass=groupOfNames))\", \"LDAP_USERIDMAP\": \"*:uid\",\"LDAP_GROUPIDMAP\":\"*:cn\", \"LDAP_GROUPMEMBERIDMAP\": \"groupOfNames:member\"}"
    body_format: json
    headers:
      Authorization: 'bearer {{ access_token.stdout }}'
      Content-Type: 'application/json'
    validate_certs: no
    use_proxy: no
  environment:
    no_proxy: cp-console.apps.{{ domain }}
  when: ldap_depl_type == "S" and (install_ics == 'Y' or install_cp4s == 'Y') and ldap_connections.json[0].LDAP_ID

- name: Add OpenLDAP to ICS configuration fo container
  uri:
    url: 'https://cp-console.apps.{{ domain }}/idmgmt/identity/api/v1/directory/ldap/onboardDirectory'
    method: POST
    body: "{\"LDAP_ID\": \"openldap\", \"LDAP_URL\": \"ldap://{{ ldap_url }}\", \"LDAP_BASEDN\": \"{{ ldap_domain }}\", \"LDAP_BINDDN\": \"cn=admin,{{ ldap_domain }}\", \"LDAP_BINDPASSWORD\": \"{{ ldap_password_base64.stdout }}\", \"LDAP_TYPE\": \"Custom\", \"LDAP_USERFILTER\": \"(&(uid=%v)(objectclass=inetOrgPerson))\", \"LDAP_GROUPFILTER\": \"(&(cn=%v)(objectclass=groupOfNames))\", \"LDAP_USERIDMAP\": \"*:uid\",\"LDAP_GROUPIDMAP\":\"*:cn\", \"LDAP_GROUPMEMBERIDMAP\": \"groupOfNames:member\"}"
    body_format: json
    headers:
      Authorization: 'bearer {{ access_token.stdout }}'
      Content-Type: 'application/json'
    validate_certs: no
    use_proxy: no
  environment:
    no_proxy: cp-console.apps.{{ domain }}
  when: ldap_depl_type == "C" and (install_ics == 'Y' or install_cp4s == 'Y')

